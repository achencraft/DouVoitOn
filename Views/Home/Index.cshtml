@{
    ViewData["Title"] = "Home Page";
}

<div class="row" style="margin: 50px">

    <div class="col-sm" style="text-align:right;">
        <h2>Mais d'où voit-on</h2>
    </div>

    <div class="col-sm">
        <form style="width:500px;">

            <div class="dropdown">
                <input type="text" class="jAuto form-control dropdown-toggle"
                       placeholder="Saisissez un lieu . . ." autocomplete="off">
                <div class="dropdown-menu">
                    <i class="hasNoResults">Aucun résultat</i>
                    <i class="hasNoValue">Saisissez du texte</i>
                    <div class="list-autocomplete">
                        @foreach (var lieu in ViewBag.Lieux)
                        {
                            <button type="button" class="btn_lieu dropdown-item" data-lieu_id="@lieu.Id">@lieu.Ville - @lieu.Nom</button>
                        }
                    </div>
                    <hr>
                    <a href="/Lieu" type="button" class="dropdown-item">Voir la liste de tous les lieux</a>
                </div>
            </div>
        </form>
    </div>

    <div class="col-sm">
        <h2>?</h2>
    </div>

</div>


<div class="row">
    <div id="map" style=" height: 70vh"></div>
</div>



<script>
    var map = L.map('map').setView([46.86, 3.16], 4);
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    var marker_lieu;
    var markers = [];

    var myicon = L.icon({
        iconUrl: '/media/panneau.png',
        shadowUrl: '/media/ombre.png',

        iconSize: [50, 47], // size of the icon
        shadowSize: [25, 35], // size of the shadow
        iconAnchor: [25, 47], // point of the icon which will correspond to marker's location
        shadowAnchor: [0, 35],  // the same for the shadow
        popupAnchor: [0, -40] // point from which the popup should open relative to the iconAnchor
    });

    $(document).on('click', '.btn_lieu', function () {
        $.get("/Home/GetLieu/" + $(this).data('lieu_id'), null, function (data) {

            for (m of markers) { 
                m.remove();
            }
            markers = []
            const panneaux_markers_latlng = [[data.lieu.latitude, data.lieu.longitude]]


            marker_lieu = L.marker([data.lieu.latitude, data.lieu.longitude])
            var menu = '<a href="Lieu/View/' + data.lieu.id + '">Consulter</a><br><a href="Lieu/Edit/' + data.lieu.id + '">Editer</a>'
            marker_lieu.bindPopup('<b>' + data.lieu.ville + ' - ' + data.lieu.nom + '</b><br>' + menu).openPopup();
            markers.push(marker_lieu)


            data.panneaux.forEach((p) => {
                markers.push(L.marker([p.panneau.latitude, p.panneau.longitude], { title: p.panneau.ville, alt: p.panneau.ville, draggable: false, icon: myicon }))
                panneaux_markers_latlng.push([p.panneau.latitude, p.panneau.longitude])
            });

            for (m of markers) {
                m.addTo(map);
            }
            map.flyToBounds(panneaux_markers_latlng, { duration: 1 });
        });


    });
</script>

