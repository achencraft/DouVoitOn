@model DouVoitOn.Models.Lieu

@{
    ViewData["Title"] = "Lieu";
}

<h1>@Model.Ville - @Model.Nom
    @if (!Model.Activated)
    {
        <span class="badge badge-primary" style="background-color:#dc3545;">Lieu non validé</span>
    }  
</h1>


@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />


        <h3>Position du Lieu</h3>

        <div id="map_new_lieu" style=" height: 300px"></div>

        <br />

        <div class="form-group row">
            @Html.LabelFor(model => model.Latitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Latitude, new { htmlAttributes = new { @id = "latitude_field", @class = "form-control", placeholder = "---", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Latitude, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group row">
            @Html.LabelFor(model => model.Longitude, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Longitude, new { htmlAttributes = new { @id = "longitude_field", @class = "form-control", placeholder = "---", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Longitude, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.Pays, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Pays, new { htmlAttributes = new { @id = "Pays_field",@class = "form-control" , placeholder = "---", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Pays, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.Ville, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Ville, new { htmlAttributes = new { @id = "Ville_field",@class = "form-control" , placeholder = "---", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Ville, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.Adresse, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Adresse, new { htmlAttributes = new { @id = "Adresse_field", @class = "form-control" , placeholder = "---", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Adresse, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.Nom, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Nom, new { htmlAttributes = new { @id = "Name_field", @class = "form-control", placeholder = "centre-ville", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Nom, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="form-group row">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-sm-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @id = "Desc_field", @class = "form-control", @readonly = true } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>


        <hr />

        <h3>Panneaux menant vers ce lieu</h3>

        <table id="Panneaux" class="table table-striped table-dark">
            <tr>
                <th>Id</th>
                <th>Adresse</th>
                <th>
                    Type de Panneau
                    <a href="/Documentation/TypePanneaux" target="_blank">
                        <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="20" height="20" viewBox="0 0 50 50">
                            <path fill="#FFFFFF" d="M 25 2 C 12.309295 2 2 12.309295 2 25 C 2 37.690705 12.309295 48 25 48 C 37.690705 48 48 37.690705 48 25 C 48 12.309295 37.690705 2 25 2 z M 25 4 C 36.609824 4 46 13.390176 46 25 C 46 36.609824 36.609824 46 25 46 C 13.390176 46 4 36.609824 4 25 C 4 13.390176 13.390176 4 25 4 z M 25 11 A 3 3 0 0 0 22 14 A 3 3 0 0 0 25 17 A 3 3 0 0 0 28 14 A 3 3 0 0 0 25 11 z M 21 21 L 21 23 L 22 23 L 23 23 L 23 36 L 22 36 L 21 36 L 21 38 L 22 38 L 23 38 L 27 38 L 28 38 L 29 38 L 29 36 L 28 36 L 27 36 L 27 21 L 26 21 L 22 21 L 21 21 z"></path>
                        </svg>
                    </a>
                </th>
                <th>Nomenclature Route</th>
                <th>Distance (km)</th>
                <th></th>
            </tr>
            @foreach (var panneau in ViewBag.panneaux)
            {
                
                    <tr>
                        <td>
                            @panneau.Panneau.Id
                            <a href="/panneau/view/@panneau.Panneau.Id">
                            <svg xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="20" height="20" viewBox="0 0 24 24">
                                <path fill="#FFFFFF" d="M 5 3 C 3.9069372 3 3 3.9069372 3 5 L 3 19 C 3 20.093063 3.9069372 21 5 21 L 19 21 C 20.093063 21 21 20.093063 21 19 L 21 12 L 19 12 L 19 19 L 5 19 L 5 5 L 12 5 L 12 3 L 5 3 z M 14 3 L 14 5 L 17.585938 5 L 8.2929688 14.292969 L 9.7070312 15.707031 L 19 6.4140625 L 19 10 L 21 10 L 21 3 L 14 3 z"></path>
                            </svg>
                            </a>
                        @if (!panneau.Panneau.Activated)
                        {
                            <span class="badge badge-warning" style="background-color:#dc3545;">Panneau non validé</span>
                        }
                        </td>
                        <td>@panneau.Panneau.Ville - @panneau.Panneau.Pays</td>
                        <td>@panneau.typePanneau.Nom</td>
                        <td>@panneau.NomRoute</td>
                        <td>@panneau.Distance</td>
                        <td>@if(!panneau.Activated)
                                {
                            <span class="badge badge-warning" style="background-color:#ffc107; color:black;">Lien en attente de validation</span>
                                }
                        </td>
                    </tr>
              
                
            }
        </table>



    </div>



}



<script>

    $(document).ready(function () {
       /* $("#Pays_field").val("@ViewBag.Lieu.Pays");
        $("#Ville_field").val("@ViewBag.Lieu.Ville");
        $("#Adresse_field").val("@ViewBag.Lieu.Adresse");
        $("#Name_field").val("@ViewBag.Lieu.Nom");
        $("#latitude_field").val("@ViewBag.Lieu.Latitude");
        $("#longitude_field").val("@ViewBag.Lieu.Longitude");
        $("#Desc_field").val("@ViewBag.Lieu.Description");
        $("#Active_field").val("@ViewBag.Lieu.Activated");
        $("#ID_field").val("@ViewBag.Lieu.Id");*/

        map.flyTo([@ViewBag.Lieu.Latitude, @ViewBag.Lieu.Longitude], 15);
        $("#confirm_name").text("@ViewBag.Lieu.Ville - @ViewBag.Lieu.Nom");
    });


    var map = L.map('map_new_lieu').setView([46.86, 3.16], 4);
    L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 19,
        attribution: '&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>'
    }).addTo(map);

    var myicon = L.icon({
        iconUrl: '/media/panneau.png',
        shadowUrl: '/media/ombre.png',

        iconSize: [50, 47], // size of the icon
        shadowSize: [25, 35], // size of the shadow
        iconAnchor: [25, 47], // point of the icon which will correspond to marker's location
        shadowAnchor: [0, 35],  // the same for the shadow
        popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
    });

    
    var myMarker = L.marker([@ViewBag.Lieu.Latitude, @ViewBag.Lieu.Longitude], { title: "@ViewBag.Lieu.Nom", alt: "@ViewBag.Lieu.Nom", draggable: false })
        .addTo(map);
    const panneaux_markers = new Array();

    @foreach(var p in ViewBag.panneaux)
    {
        <text>var m = L.marker([@p.Panneau.Latitude, @p.Panneau.Longitude], { title: "@p.Panneau.Ville", alt: "@p.Panneau.Ville", draggable: false, icon: myicon }).addTo(map);
             panneaux_markers.push(m);</text>
    }



</script>
